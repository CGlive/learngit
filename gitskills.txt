1、mkdir directory   //创建目录
2、git init  //初始化一个Git仓库
3、git add <file>  //把文件从工作区添加到暂存区
4、git commit -m ""  //把文件从暂存区添加到仓库
5、git status  //查看工作区的状态
6、git diff  //查看修改内容
7、git reset --hard commit_id  //在版本的历史之间切换
8、git log  //查看提交历史，以便确定要回退到哪个版本
9、git reflog  //查看命令历史，以便确定要回到未来的哪个版本
10、场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
11、场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
12、git rm  //用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
13、git remote add origin git@server-name:path/repo-name.git  //关联一个远程库
14、git push -u origin master  //第一次推送master分支的所有内容
15、git push origin master  //推送最新修改
16、git clone git@github.com:CGlive/***.git  //把远程库克隆到本地
17、查看分支：git branch

    创建分支：git branch <name>

    切换分支：git checkout <name>

    创建+切换分支：git checkout -b <name>

    合并某分支到当前分支：git merge <name>

    删除分支：git branch -d <name>
18、修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

    当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
19、查看远程库信息，使用git remote -v；

    本地新建的分支如果不推送到远程，对其他人就是不可见的；

    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
20、git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

    git tag -a <tagname> -m "blablabla..."可以指定标签信息；

    git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

    git tag可以查看所有标签。
21、git push origin <tagname>可以推送一个本地标签；

    git push origin --tags可以推送全部未推送过的本地标签；

    git tag -d <tagname>可以删除一个本地标签；

    git push origin :refs/tags/<tagname>可以删除一个远程标签。